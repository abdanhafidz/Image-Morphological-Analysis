# -*- coding: utf-8 -*-
"""5054231021_Abdan Hafidz_Tugas Morfologi Citra Dilation and Erosion_PCD

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CacmguMT8JxGzvZzRSRL0J15JdvQA3JV

## Import the Library
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
from skimage import morphology, measure
from skimage.morphology import square, disk
import cv2
from PIL import Image
import io
from IPython.display import display, clear_output
import ipywidgets as widgets

# Function to convert image to binary
def convert_to_binary(image, threshold):
    # Convert to grayscale if the image is RGB
    if len(image.shape) == 3:
        gray_image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
    else:
        gray_image = image

    # Convert to binary using threshold
    _, binary_image = cv2.threshold(gray_image, threshold, 1, cv2.THRESH_BINARY)
    return binary_image

# Function to add salt noise (white pixels)
def add_salt_noise(binary_image, salt_prob=0.05):
    noisy_image = binary_image.copy()
    # Get the shape of the image
    height, width = noisy_image.shape
    # Generate random coordinates
    num_salt = int(salt_prob * height * width)
    coords = [np.random.randint(0, i - 1, num_salt) for i in (height, width)]
    # Set those pixels to white (1)
    noisy_image[coords[0], coords[1]] = 1
    return noisy_image

# Function to add pepper noise (black pixels)
def add_pepper_noise(binary_image, pepper_prob=0.05):
    noisy_image = binary_image.copy()
    # Get the shape of the image
    height, width = noisy_image.shape
    # Generate random coordinates
    num_pepper = int(pepper_prob * height * width)
    coords = [np.random.randint(0, i - 1, num_pepper) for i in (height, width)]
    # Set those pixels to black (0)
    noisy_image[coords[0], coords[1]] = 0
    return noisy_image

# Function to apply dilation
def apply_dilation(binary_image, structuring_element):
    dilated_image = morphology.dilation(binary_image, structuring_element)
    return dilated_image

# Function to apply erosion
def apply_erosion(binary_image, structuring_element):
    eroded_image = morphology.erosion(binary_image, structuring_element)
    return eroded_image

# Function to calculate analysis metrics
def calculate_metrics(original, processed):
    # Convert to boolean format for compatibility with skimage.measure
    original_bool = original > 0
    processed_bool = processed > 0

    # Measure object properties in both images
    original_props = measure.regionprops(measure.label(original_bool))
    processed_props = measure.regionprops(measure.label(processed_bool))

    # Count objects
    original_objects = len(original_props)
    processed_objects = len(processed_props)

    # Calculate total area (white pixels)
    original_area = np.sum(original_bool)
    processed_area = np.sum(processed_bool)

    # Calculate perimeter
    original_perimeter = 0
    processed_perimeter = 0

    if original_objects > 0:
        original_perimeter = sum(prop.perimeter for prop in original_props)

    if processed_objects > 0:
        processed_perimeter = sum(prop.perimeter for prop in processed_props)

    # Calculate relative changes
    area_change = ((processed_area - original_area) / original_area) * 100 if original_area > 0 else 0
    perimeter_change = ((processed_perimeter - original_perimeter) / original_perimeter) * 100 if original_perimeter > 0 else 0

    # Calculate solidity (area / convex hull area)
    original_solidity = 0
    processed_solidity = 0

    if original_objects > 0:
        original_solidity = np.mean([prop.solidity for prop in original_props])

    if processed_objects > 0:
        processed_solidity = np.mean([prop.solidity for prop in processed_props])

    metrics = {
        "Jumlah Objek": [original_objects, processed_objects],
        "Total Area (piksel)": [original_area, processed_area],
        "Perimeter": [original_perimeter, processed_perimeter],
        "Perubahan Area (%)": [0, area_change],
        "Perubahan Perimeter (%)": [0, perimeter_change],
        "Solidity": [original_solidity, processed_solidity]
    }

    return pd.DataFrame(metrics, index=["Original", "Processed"])

# Function to display and analyze morphological operation results
def plot_analysis(binary_image, processed_square, processed_circle, operation_name,
                 square_size, circle_radius, save_prefix=""):
    fig, axes = plt.subplots(1, 3, figsize=(18, 6))

    # Create custom colormap for better visualization
    colors = [(0, 0, 0), (1, 1, 1)]
    cmap = LinearSegmentedColormap.from_list("binary_cmap", colors)

    # Plot original binary image
    axes[0].imshow(binary_image, cmap=cmap)
    axes[0].set_title("Gambar Biner Asli")
    axes[0].axis('off')

    # Plot result with square structuring element
    axes[1].imshow(processed_square, cmap=cmap)
    axes[1].set_title(f"{operation_name} dengan Persegi ({square_size}x{square_size})")
    axes[1].axis('off')

    # Plot result with circular structuring element
    axes[2].imshow(processed_circle, cmap=cmap)
    axes[2].set_title(f"{operation_name} dengan Lingkaran (radius={circle_radius})")
    axes[2].axis('off')

    plt.tight_layout()
    if save_prefix:
        plt.savefig(f"{save_prefix}-square-circle-{operation_name.lower()}.png", bbox_inches='tight', dpi=300)
    plt.show()

    # Create intensity difference histograms
    fig, axes = plt.subplots(1, 2, figsize=(16, 6))

    # Histogram: square operation vs. original
    diff_square = processed_square.astype(int) - binary_image.astype(int)
    axes[0].hist(diff_square.flatten(), bins=3, alpha=0.7, color='blue')
    axes[0].set_title(f"Histogram Perbedaan: Persegi vs. Asli ({operation_name})")
    axes[0].set_xlabel("Nilai Perbedaan")
    axes[0].set_ylabel("Jumlah Piksel")

    # Histogram: circle operation vs. original
    diff_circle = processed_circle.astype(int) - binary_image.astype(int)
    axes[1].hist(diff_circle.flatten(), bins=3, alpha=0.7, color='red')
    axes[1].set_title(f"Histogram Perbedaan: Lingkaran vs. Asli ({operation_name})")
    axes[1].set_xlabel("Nilai Perbedaan")
    axes[1].set_ylabel("Jumlah Piksel")

    plt.tight_layout()
    plt.show()

    # Difference heatmaps
    fig, axes = plt.subplots(1, 2, figsize=(16, 6))

    axes[0].imshow(diff_square, cmap='hot')
    axes[0].set_title(f"Perbedaan: {operation_name} Persegi - Asli")
    axes[0].axis('off')

    axes[1].imshow(diff_circle, cmap='hot')
    axes[1].set_title(f"Perbedaan: {operation_name} Lingkaran - Asli")
    axes[1].axis('off')

    plt.tight_layout()
    plt.show()

    # Analysis metrics
    square_metrics = calculate_metrics(binary_image, processed_square)
    circle_metrics = calculate_metrics(binary_image, processed_circle)

    print(f"Metrik Analisis untuk {operation_name} dengan Persegi:")
    display(square_metrics)

    print(f"\nMetrik Analisis untuk {operation_name} dengan Lingkaran:")
    display(circle_metrics)

    # Comparison metrics plot
    metrics_comparison = pd.DataFrame({
        "Persegi": square_metrics.loc["Processed"],
        "Lingkaran": circle_metrics.loc["Processed"]
    })

    plt.figure(figsize=(12, 6))
    metrics_comparison.iloc[:4].plot(kind='bar')
    plt.title(f"Perbandingan Metrik {operation_name}: Persegi vs Lingkaran")
    plt.ylabel("Nilai")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    # Shape outline comparison visualization
    fig, axes = plt.subplots(1, 3, figsize=(18, 6))

    # Original image outline
    axes[0].imshow(binary_image, cmap='gray')
    axes[0].contour(binary_image, colors='red', linewidths=1)
    axes[0].set_title("Outline Gambar Asli")
    axes[0].axis('off')

    # Square operation outline
    axes[1].imshow(binary_image, cmap='gray', alpha=0.5)
    axes[1].contour(processed_square, colors='blue', linewidths=1.5)
    axes[1].set_title(f"Outline {operation_name} Persegi")
    axes[1].axis('off')

    # Circle operation outline
    axes[2].imshow(binary_image, cmap='gray', alpha=0.5)
    axes[2].contour(processed_circle, colors='green', linewidths=1.5)
    axes[2].set_title(f"Outline {operation_name} Lingkaran")
    axes[2].axis('off')

    plt.tight_layout()
    plt.show()

# Create widgets for structuring element size selection
square_size_slider = widgets.IntSlider(
    value=3,
    min=1,
    max=15,
    step=2,
    description='Ukuran Persegi:',
    continuous_update=False
)

circle_radius_slider = widgets.IntSlider(
    value=3,
    min=1,
    max=15,
    step=1,
    description='Radius Lingkaran:',
    continuous_update=False
)

threshold_slider = widgets.IntSlider(
    value=127,
    min=0,
    max=255,
    step=1,
    description='Threshold:',
    continuous_update=False
)

# Add noise control sliders
salt_noise_slider = widgets.FloatSlider(
    value=0.0,
    min=0.0,
    max=0.3,
    step=0.01,
    description='Salt Noise:',
    continuous_update=False
)

pepper_noise_slider = widgets.FloatSlider(
    value=0.0,
    min=0.0,
    max=0.3,
    step=0.01,
    description='Pepper Noise:',
    continuous_update=False
)

# Create dropdown for operation selection
operation_dropdown = widgets.Dropdown(
    options=[
        ('Dilasi', 'dilation'),
        ('Erosi', 'erosion'),
        ('Dilasi dengan Pepper Noise', 'dilation_pepper'),
        ('Erosi dengan Salt Noise', 'erosion_salt')
    ],
    value='dilation',
    description='Operasi:',
    disabled=False
)

# Create widget for image upload (multiple)
file_upload = widgets.FileUpload(
    accept='image/*',
    description='Upload Gambar',
    multiple=True
)

# Create widget for selecting which image to process
image_dropdown = widgets.Dropdown(
    options=[],
    description='Pilih Gambar:',
    disabled=True
)

# Function to update dropdown when images are uploaded
def update_dropdown(*args):
    if file_upload.value:
        image_dropdown.options = [(name, name) for name in file_upload.value.keys()]
        image_dropdown.disabled = False
    else:
        image_dropdown.options = []
        image_dropdown.disabled = True

file_upload.observe(update_dropdown, names='value')

# Dictionary to store output widgets for each processed image
output_widgets = {}

# Dictionary to store processing results
processed_results = {}

# Function to process the selected image
def process_image(b):
    # Get the selected image
    if not file_upload.value:
        print("Mohon upload gambar terlebih dahulu.")
        return

    if image_dropdown.value is None:
        print("Mohon pilih gambar dari dropdown.")
        return

    selected_image = image_dropdown.value
    operation = operation_dropdown.value

    # Create or get output widget for this image
    widget_key = f"{selected_image}_{operation}"
    if widget_key not in output_widgets:
        output_widgets[widget_key] = widgets.Output(layout={'border': '1px solid black', 'padding': '10px', 'margin': '10px 0'})
        display(widgets.HTML(f"<h3>Hasil analisis: {selected_image} - {operation_dropdown.options[operation_dropdown.index][0]}</h3>"))
        display(output_widgets[widget_key])

    # Process in the specific output widget for this image
    with output_widgets[widget_key]:
        clear_output()

        image_data = file_upload.value[selected_image]
        image = np.array(Image.open(io.BytesIO(image_data['content'])))

        # Convert to binary
        binary_image = convert_to_binary(image, threshold_slider.value)

        # Apply noise based on operation
        if operation == 'dilation_pepper':
            binary_image = add_pepper_noise(binary_image, pepper_noise_slider.value)
            operation_name = "Dilasi"
            morphological_op = apply_dilation
        elif operation == 'erosion_salt':
            binary_image = add_salt_noise(binary_image, salt_noise_slider.value)
            operation_name = "Erosi"
            morphological_op = apply_erosion
        elif operation == 'dilation':
            operation_name = "Dilasi"
            morphological_op = apply_dilation
        elif operation == 'erosion':
            operation_name = "Erosi"
            morphological_op = apply_erosion

        # Create structuring elements
        se_square = square(square_size_slider.value)
        se_circle = disk(circle_radius_slider.value)

        # Apply morphological operation
        processed_square = morphological_op(binary_image, se_square)
        processed_circle = morphological_op(binary_image, se_circle)

        # Save results with appropriate filenames
        base_name = selected_image.rsplit('.', 1)[0]
        operation_suffix = operation.lower()
        square_filename = f"{base_name}-{operation_suffix}-square-{square_size_slider.value}.png"
        circle_filename = f"{base_name}-{operation_suffix}-circle-{circle_radius_slider.value}.png"
        plt.imsave(square_filename, processed_square, cmap='gray')
        plt.imsave(circle_filename, processed_circle, cmap='gray')

        # Store results for comparison between images
        processed_results[widget_key] = {
            'binary': binary_image,
            'square': processed_square,
            'circle': processed_circle,
            'square_size': square_size_slider.value,
            'circle_radius': circle_radius_slider.value,
            'threshold': threshold_slider.value,
            'operation': operation_name,
            'salt_noise': salt_noise_slider.value if operation == 'erosion_salt' else 0,
            'pepper_noise': pepper_noise_slider.value if operation == 'dilation_pepper' else 0
        }

        # Display results and analysis
        print(f"Gambar yang diproses: {selected_image}")
        print("Ukuran gambar asli:", image.shape)
        print(f"Operasi yang diterapkan: {operation_dropdown.options[operation_dropdown.index][0]}")
        print(f"Hasil disimpan sebagai: {square_filename} dan {circle_filename}")

        # For erosion operations with special filenames
        if operation == 'erosion':
            special_square_filename = f"square-circle-erode1.png"
            special_circle_filename = f"square-circle-erode2.png"
            plt.imsave(special_square_filename, processed_square, cmap='gray')
            plt.imsave(special_circle_filename, processed_circle, cmap='gray')
            print(f"Hasil juga disimpan sebagai: {special_square_filename} dan {special_circle_filename}")

        # Display noise parameters if applicable
        if operation == 'dilation_pepper':
            print(f"Pepper noise level: {pepper_noise_slider.value}")
        elif operation == 'erosion_salt':
            print(f"Salt noise level: {salt_noise_slider.value}")

        # Plot analysis and comparison
        plot_analysis(binary_image, processed_square, processed_circle, operation_name,
                     square_size_slider.value, circle_radius_slider.value,
                     save_prefix=base_name)

        # Display structural element comparison
        fig, axes = plt.subplots(1, 2, figsize=(10, 5))

        axes[0].imshow(se_square, cmap='gray', interpolation='nearest')
        axes[0].set_title(f"Elemen Penstruktur Persegi {square_size_slider.value}x{square_size_slider.value}")
        axes[0].axis('off')

        axes[1].imshow(se_circle, cmap='gray', interpolation='nearest')
        axes[1].set_title(f"Elemen Penstruktur Lingkaran (radius={circle_radius_slider.value})")
        axes[1].axis('off')

        plt.tight_layout()
        plt.show()

        # For erosion operations, show explanation of observations
        if operation == 'erosion':
            print("\nObservations for Erosion Operation:")
            print("1. Square vs Circle Structuring Elements:")
            print("   - Square structuring elements tend to preserve more angular and rectangular features.")
            print("   - Circular structuring elements better preserve rounded shapes and are more isotropic.")
            print("2. Effect on Size:")
            print("   - Erosion shrinks objects and may eliminate small objects entirely.")
            print("   - Larger structuring elements cause more significant shrinking.")
            print("3. Effect on Noise:")
            print("   - Erosion helps remove small positive noise (white spots).")
            print("   - But it can also disconnect thin structures in the image.")

# Function to compare results between processed images
def compare_all_images(b):
    # Create a new output widget for comparison
    comparison_output = widgets.Output(layout={'border': '1px solid black', 'padding': '10px', 'margin': '10px 0'})
    display(widgets.HTML("<h3>Perbandingan Semua Gambar</h3>"))
    display(comparison_output)

    with comparison_output:
        if len(processed_results) < 2:
            print("Mohon proses setidaknya 2 gambar terlebih dahulu untuk perbandingan.")
            return

        # Group results by operation type
        operation_groups = {}
        for key, results in processed_results.items():
            op_name = results['operation']
            if op_name not in operation_groups:
                operation_groups[op_name] = []
            operation_groups[op_name].append((key, results))

        # Compare square structuring element results by operation type
        for op_name, op_results in operation_groups.items():
            if not op_results:
                continue

            fig, axes = plt.subplots(1, len(op_results), figsize=(18, 6))
            if len(op_results) == 1:
                axes = [axes]

            # Plot square comparison
            plt.suptitle(f"Perbandingan {op_name} dengan Persegi untuk Semua Gambar", fontsize=16)

            for i, (key, results) in enumerate(op_results):
                axes[i].imshow(results['square'], cmap='gray')
                img_name = key.split('_')[0]  # Extract image name from key
                noise_info = ""
                if results['pepper_noise'] > 0:
                    noise_info = f"\nPepper Noise: {results['pepper_noise']}"
                elif results['salt_noise'] > 0:
                    noise_info = f"\nSalt Noise: {results['salt_noise']}"
                axes[i].set_title(f"{img_name}\nPersegi {results['square_size']}x{results['square_size']}{noise_info}")
                axes[i].axis('off')

            plt.tight_layout(rect=[0, 0, 1, 0.95])
            plt.show()

            # Compare circle structuring element results
            fig, axes = plt.subplots(1, len(op_results), figsize=(18, 6))
            if len(op_results) == 1:
                axes = [axes]

            # Plot circle comparison
            plt.suptitle(f"Perbandingan {op_name} dengan Lingkaran untuk Semua Gambar", fontsize=16)

            for i, (key, results) in enumerate(op_results):
                axes[i].imshow(results['circle'], cmap='gray')
                img_name = key.split('_')[0]  # Extract image name from key
                noise_info = ""
                if results['pepper_noise'] > 0:
                    noise_info = f"\nPepper Noise: {results['pepper_noise']}"
                elif results['salt_noise'] > 0:
                    noise_info = f"\nSalt Noise: {results['salt_noise']}"
                axes[i].set_title(f"{img_name}\nLingkaran radius={results['circle_radius']}{noise_info}")
                axes[i].axis('off')

            plt.tight_layout(rect=[0, 0, 1, 0.95])
            plt.show()

        # Compare metrics between images
        metrics_data = {}

        for key, results in processed_results.items():
            # Calculate metrics for this image
            square_metrics = calculate_metrics(results['binary'], results['square'])
            circle_metrics = calculate_metrics(results['binary'], results['circle'])

            # Store metrics for comparison
            img_name = key.split('_')[0]  # Extract image name from key
            op_name = results['operation']
            metrics_data[f"{img_name} - {op_name} (Persegi)"] = square_metrics.loc["Processed"]
            metrics_data[f"{img_name} - {op_name} (Lingkaran)"] = circle_metrics.loc["Processed"]

        # Create dataframe from collected metrics
        comparative_metrics = pd.DataFrame(metrics_data)

        # Display comparison table
        print("Perbandingan Metrik untuk Semua Gambar:")
        display(comparative_metrics)

        # Visualize metrics comparison
        plt.figure(figsize=(14, 8))
        comparative_metrics.iloc[:4].T.plot(kind='bar')
        plt.title("Perbandingan Metrik antar Gambar dan Teknik Morfologi", fontsize=16)
        plt.ylabel("Nilai")
        plt.xlabel("Gambar dan Teknik")
        plt.xticks(rotation=45)
        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
        plt.tight_layout()
        plt.show()

# Create button for processing images
process_button = widgets.Button(description="Proses Gambar")
process_button.on_click(process_image)

# Create button for comparing all images
compare_button = widgets.Button(description="Bandingkan Semua Gambar")
compare_button.on_click(compare_all_images)

# Display all widgets
display(file_upload)
display(image_dropdown)
display(widgets.HBox([threshold_slider]))
display(widgets.HBox([salt_noise_slider, pepper_noise_slider]))
display(widgets.HBox([square_size_slider, circle_radius_slider]))
display(operation_dropdown)
display(widgets.HBox([process_button, compare_button]))

